---
apiVersion: batch/v1
kind: Job
metadata:
  name: test-opensearch
spec:
  template:
    spec:
      # serviceAccountName: test-sa
      containers:
        - name: test-opensearch
          image: oci.stackable.tech/sdp/testing-tools:0.2.0-stackable0.0.0-dev
          command:
            - /bin/bash
            - -c
          args:
            - |
              pip install opensearch-py
              python scripts/test.py
          env:
            # required for pip install
            - name: HOME
              value: /stackable
          volumeMounts:
            - name: script
              mountPath: /stackable/scripts
            - name: tls
              mountPath: /stackable/tls
      volumes:
        - name: script
          configMap:
            name: test-opensearch
        - name: tls
          ephemeral:
            volumeClaimTemplate:
              metadata:
                annotations:
                  secrets.stackable.tech/class: tls
              spec:
                storageClassName: secrets.stackable.tech
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: "1"
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsUser: 1000
      restartPolicy: OnFailure
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-opensearch
data:
  test.py: |
    # https://docs.opensearch.org/docs/latest/clients/python-low-level/#sample-program

    from opensearchpy import OpenSearch

    # TODO Use a discovery ConfigMap

    host = 'opensearch-nodes-cluster-manager.default.svc.cluster.local'
    port = 9200
    auth = ('admin', 'AJVFsGJBbpT6mChn') # For testing only. Don't store credentials in code.
    ca_certs_path = '/stackable/tls/ca.crt'

    # Create the client with SSL/TLS enabled, but hostname verification disabled.
    client = OpenSearch(
        hosts = [{'host': host, 'port': port}],
        http_compress = True, # enables gzip compression for request bodies
        http_auth = auth,
        # client_cert = client_cert_path,
        # client_key = client_key_path,
        use_ssl = True,
        verify_certs = True,
        ssl_assert_hostname = False,
        ssl_show_warn = False,
        ca_certs = ca_certs_path
    )

    # Create an index with non-default settings.
    index_name = 'python-test-index'
    index_body = {
      'settings': {
        'index': {
          'number_of_shards': 4
        }
      }
    }

    response = client.indices.create(index=index_name, body=index_body)
    print('\nCreating index:')
    print(response)

    # Add a document to the index.
    document = {
      'title': 'Moneyball',
      'director': 'Bennett Miller',
      'year': '2011'
    }
    id = '1'

    response = client.index(
        index = index_name,
        body = document,
        id = id,
        refresh = True
    )

    print('\nAdding document:')
    print(response)

    # Perform bulk operations

    movies = '{ "index" : { "_index" : "my-dsl-index", "_id" : "2" } } \n { "title" : "Interstellar", "director" : "Christopher Nolan", "year" : "2014"} \n { "create" : { "_index" : "my-dsl-index", "_id" : "3" } } \n { "title" : "Star Trek Beyond", "director" : "Justin Lin", "year" : "2015"} \n { "update" : {"_id" : "3", "_index" : "my-dsl-index" } } \n { "doc" : {"year" : "2016"} }'

    client.bulk(body=movies)

    # Search for the document.
    q = 'miller'
    query = {
      'size': 5,
      'query': {
        'multi_match': {
          'query': q,
          'fields': ['title^2', 'director']
        }
      }
    }

    response = client.search(
        body = query,
        index = index_name
    )
    print('\nSearch results:')
    print(response)

    # Delete the document.
    response = client.delete(
        index = index_name,
        id = id
    )

    print('\nDeleting document:')
    print(response)

    # Delete the index.
    response = client.indices.delete(
        index = index_name
    )

    print('\nDeleting index:')
    print(response)
