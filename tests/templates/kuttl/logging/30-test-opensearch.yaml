---
apiVersion: batch/v1
kind: Job
metadata:
  name: test-log-aggregation
spec:
  template:
    spec:
      containers:
        - name: test-log-aggregation
          image: oci.stackable.tech/sdp/testing-tools:0.2.0-stackable0.0.0-dev
          # TODO Extend the metrics Job or reduce this one?
          command:
            - python
          args:
            - scripts/test.py
          volumeMounts:
            - name: script
              mountPath: /stackable/scripts
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
          resources:
            requests:
              memory: 128Mi
              cpu: 100m
            limits:
              memory: 128Mi
              cpu: 400m
      volumes:
        - name: script
          configMap:
            name: test-log-aggregation
      serviceAccountName: test-service-account
      securityContext:
        fsGroup: 1000
      restartPolicy: OnFailure
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-log-aggregation
data:
  test.py: |
    import requests


    def check_sent_events():
        response = requests.post(
            'http://opensearch-vector-aggregator:8686/graphql',
            json={
                'query': """
                    {
                        transforms(first:100) {
                            nodes {
                                componentId
                                metrics {
                                    sentEventsTotal {
                                        sentEventsTotal
                                    }
                                }
                            }
                        }
                    }
                """
            }
        )

        assert response.status_code == 200, \
            'Cannot access the API of the vector aggregator.'

        result = response.json()

        transforms = result['data']['transforms']['nodes']
        for transform in transforms:
            sentEvents = transform['metrics']['sentEventsTotal']
            componentId = transform['componentId']

            if componentId == 'filteredInvalidEvents':
                assert sentEvents is None or \
                       sentEvents['sentEventsTotal'] == 0, \
                       'Invalid log events were sent.'
            else:
                assert sentEvents is not None and \
                       sentEvents['sentEventsTotal'] > 0, \
                       f'No events were sent in "{componentId}".'


    if __name__ == '__main__':
        check_sent_events()
        print('Test successful!')
